#!/usr/bin/env bash

# DEPENDENCIES
# -------------------------------------------------------------------------------------------------
# - bash 4

# Global variables
# -------------------------------------------------------------------------------------------------
FILE_PATH=$(realpath "${0}")
BIN_DIR="${BIN_DIR:-$(dirname $FILE_PATH)}"
PARENT_BIN_DIR="${PARENT_BIN_DIR:-$(dirname $BIN_DIR)}"

# Entrypoint
# -------------------------------------------------------------------------------------------------

function main {
  validate_requirements
  install_fresh
  install_shell_tools
  install_min_fresh
  setup_ssh_credentials
}

# Validate requirements
# -------------------------------------------------------------------------------------------------

function validate_requirements {
  validate_bash_dependency
}

function validate_bash_dependency {
  major_version="$(bash --version | head -1 | cut -d ' ' -f 4 | cut -d '.' -f 1)"
  min_major_version="4"

  if [ "${major_version}" -lt "${min_major_version}" ]; then
    throw_error "Your bash major version must be ${min_major_version} or greater"
  fi
}

# Install fresh
# -------------------------------------------------------------------------------------------------

function install_fresh {
  source "${BIN_DIR}/install-fresh"
}

# Install shell tools
# -------------------------------------------------------------------------------------------------

function install_shell_tools {
  install_zsh_plugin_manager
  install_starship
  install_debug_tools
}

function install_zsh_plugin_manager {
  rm -rf "${HOME}/.zinit" || true
  mkdir "${HOME}/.zinit"

  git clone https://github.com/zdharma/zinit.git "${HOME}/.zinit/bin"
}

function install_starship {
  pushd /tmp > /dev/null

  curl -fsSL https://starship.rs/install.sh -Lso "starship_install.sh"
  chmod +x "./starship_install.sh"
  ./starship_install.sh -y

  popd > /dev/null
}

function install_debug_tools {
  curl -fsSL https://gist.githubusercontent.com/delucca/2ecfeb34eeffd9d92d74631a9c24f9c0/raw/e50f9accee6f1b8133006ae615e3c56d97a6bf96/debug-environment.sh | bash
}

# Install min fresh
# -------------------------------------------------------------------------------------------------

function install_min_fresh {
  update_fresh_symlinks
  remove_zsh_old_config
  run_fresh
}

function update_fresh_symlinks {
  rm -rf "${HOME}/.dotfiles" || true
  rm -rf "${HOME}/.fresrc" || true

  ln -s "${PARENT_BIN_DIR}" "${HOME}/.dotfiles"
  ln -s "${PARENT_BIN_DIR}/freshrc.min" "${HOME}/.freshrc"
}

function remove_zsh_old_config {
  rm -rf "${HOME}/.zshrc" || true
}

function run_fresh {
  source "${HOME}/.fresh/build/shell.sh"
  fresh
}

# Setup SSH credentials
# -------------------------------------------------------------------------------------------------

function setup_ssh_credentials {
  if [[ -n "${SSH_PRIVATE_KEY}" && -n "${SSH_PUBLIC_KEY}" ]]; then
    ensure_ssh_dir
    copy_private_key
    copy_public_key
    start_ssh_agent
  fi
}

function ensure_ssh_dir {
  mkdir -p "${HOME}/.ssh"
}

function copy_private_key {
  private_key_file_path="${HOME}/.ssh/id"
  
  echo "${SSH_PRIVATE_KEY}" > $private_key_file_path
  chmod 600 $private_key_file_path
}

function copy_public_key {
  public_key_file_path="${HOME}/.ssh/id.pub"
  
  echo "${SSH_CODESPACE_PUBLIC_KEY}" > $public_key_file_path
  chmod 600 $public_key_file_path
}

function start_ssh_agent {
  eval $(ssh-agent -s)
  ssh-add "~/.ssh/id"
}

# Execute
# -------------------------------------------------------------------------------------------------

main
